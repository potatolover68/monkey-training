def _fnv_1a(string: str, bits, offset_basis, prime) -> int:
    assert bits in [32, 64, 128, 256, 512, 1024]
    bitmask = (2 ** bits) - 1
    hash_value = offset_basis
    data = string.encode('utf-8')
    for byte in data:
        hash_value ^= byte
        hash_value *= prime
        hash_value &= bitmask
    return hash_value

def fnv_1a_32(string: str) -> int:
    return _fnv_1a(string, 32, 2166136261, 16777619)
def fnv_1a_64(string: str) -> int:
    return _fnv_1a(string, 64, 14695981039346656037, 1099511628211)
def fnv_1a_128(string: str) -> int:
    return _fnv_1a(string, 128, 144066263297769815596495629667062367629, 309485009821345068724781371)
def fnv_1a_256(string: str) -> int:
    return _fnv_1a(string, 256, 100029257958052580907070968620625704837092796014241193945225284501741471925557,  374144419156711147060143317175368453031918731002211)
def fnv_1a_512(string: str) -> int:
    return _fnv_1a(string, 512, 9659303129496669498009435400716310466090418745672637896108374329434462657994582932197716438449813051892206539805784495328239340083876191928701583869517785, 35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852759)
def fnv_1a_1024(string: str) -> int:
    return _fnv_1a(string, 1024, 14197795064947621068722070641403218320880622795441933960878474914617582723252296732303717722150864096521202355549365628174669108571814760471015076148029755969804077320157692458563003215304957150157403644460363550505412711285966361610267868082893823963790439336411086884584107735010676915, 5016456510113118655434598811035278955030765345404790744303017523831112055108147451509157692220295382716162651878526895249385292291816524375083746691371804094271873160484737966720260389217684476157468082573)

# these numbers are rather large, I know

if __name__ == "__main__":
    test_count = 1000
    from random import choice, randint
    from string import ascii_letters
    from numpy import std
    
    randchrs = [''.join(choice(ascii_letters) for i in range(randint(32, 128))) for i in range(test_count)] # this glob generates a list of length test_count, which contains random strings of length 32-128
    hashed = [fnv_1a_64(i) for i in randchrs]
    print(std(hashed)/ ((2**64)/(12**0.5))) # closer to 1 is better